The work done:

I have analysed Java code using three sources:
Javaparser in Java
Java Lang in python
Plyj in python

All of these parsers tend to break down the java code in AST.

Java lang and Plyj are similar and tend to perform similar Tasks. Java Lang is preferable for JAVA 8 or later. 

Part A: PLYJ

Plyj is based on the ply(python-lex-Yacc) framework. They are used to parse as well as create compilation units for it.
Using this one can inspect the source code and analyse the components in the units.

Example : Consider the most basic hello world in java
When this is run through this we get,
tree = parser.parse_file(('helloworld.java'))
print(tree)

CompilationUnit(package_declaration=None, import_declarations=[], type_declarations=[ClassDeclaration(name='helloworld', body=[MethodDeclaration(name='main', modifiers=['public', 'static'], type_parameters=[], parameters=[FormalParameter(variable=Variable(name='args', dimensions=0), type=Type(name=Name(value='String'), type_arguments=[], enclosed_in=None, dimensions=1), modifiers=[], vararg=False)], return_type='void', body=[ExpressionStatement(expression=MethodInvocation(name='println', arguments=[Literal(value='"Hello, World"')], type_arguments=[], target=Name(value='System.out')))], abstract=False, extended_dims=0, throws=None)], modifiers=['public'], type_parameters=[], extends=None, implements=[])])

This evaluates each line as it parses through and gives us enough information about the code from where we can extract the relevant information.


We can also use plyj to analyse expressions like this:

tree = parser.parse_expression('2*4')

This gives the following output:


Multiplicative(operator='*', lhs=Literal(value='2'), rhs=Literal(value='4'))



Part B: JavaLang

JavaLang  is a parser and lexer targeting Java 8. It is similar to plyj for parsing Java files and converting them into compilation units. Along with that one can even tokenize the string in that using this library. 

Let us consider the tokenizing part of it:

If we have the statement:
System.out.println("Hello " + "world");
And we want to tokenize it we get the following output:

[Identifier "System" line 1, position 1, Separator "." line 1, position 7, Identifier "out" line 1, position 8, Separator "." line 1, position 11, Identifier "println" line 1, position 12, Separator "(" line 1, position 19, String ""Hello "" line 1, position 20, Operator "+" line 1, position 29, String ""world"" line 1, position 31, Separator ")" line 1, position 38, Separator ";" line 1, position 39]


This gives the following things:
Type of token
The token 
The line number of the token
The position of the first occurence of the token

Also similar to plyj it generates the compilation units:

Example: Compilation unit of the statement just like the previous one is given as:

MethodInvocation(arguments=[BinaryOperation(operandl=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="Hello "), operandr=Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value="world"), operator=+)], member=println, postfix_operators=[], prefix_operators=[], qualifier=System.out, selectors=[], type_arguments=None)






Part C: JavaParser

JavaParser is a set of tools to


JavaParser is used to parse Java Code into AST(Abstract Syntax Tree) that represents  and unparse it also if required.

Consider the following example:
public void start(BundleContext context) throws Exception 
{
 	super.start(context);
 } 

When we parse in JavaParser using this we get the following output:

INPUT: 									OUTPUT:
public void								Super Method Invocation, 
start (BundleContext context) 						Public Method Declaration,
throws Exception { 							Exception,
	super.start(context); 						Formal Method Parameter,
}    									Single Variable Declaration,
									Void


After building the tree using Eclipse AST API, the parser performs a semantic analyzed
using the information in each node.

Let us see all the steps of the JavaParser:
1. Abstract Syntax tree:

Typically in an AST whitespace and comment tokens are omitted,as are parenthesis. However since comments are very useful in Java , the JavaParser library will record comment information and include it in the tree representation.

Similarly like the plyj and JavaLang in python, the root of the AST is a compilation unit. It is the Java representation of source code from a complete and syntactically correct class file you have parsed.

2. Classes used for traversla of the tree:

It is a good idea to define a class to traverse the AST and operate on the concepts within the code one is interested in. 
There are two reasons for this:
1. Traversing the AST in the CompilationUnit tends to be laborious and error prone.
2. It is recursive and makes use of frequent type checking to achieve the goal.


Using JavaParser for code generationa and transformation:	
JavaParser can do this by calling the toString() method for the compilationUnit generated for the AST generated.

Using JavaParser for symbols and refereneces:

Mostly the AST is useful for parsing our code. But there are instances in Java where we need to examine the nature betweern the nodes generated in the AST.

Consider the follwing example:

void foo()
{
	int a;
	a=a+1;
}

In this we know that a=a+1 is an assignment operator. However we do not know the fact that what is the type of a. a can be a int in which case the result of a=a+1 will also generate an integer. However if a is a string then this means that a=a+1 is a concatenation. This type of reference information is not available in the AST.

To solve this problem I have made use of the JavaSymbolSolver(bundles with the JavaParser library) to solve references between elements of a JavaParser AST.
Eg. In Maven
<dependency> 
<groupId>com.github.javaparser</groupId> 
<artifactId>javaparser-symbol-solver-core</artifactId> 
<version>3.5.20</version> 
</dependency>

Let us see one more example:

class RefCheck
{
	private String a;

	void afunc()
	{
		while(true){
			int a=0;
			a=a+1;
		}

	}
		}
}



